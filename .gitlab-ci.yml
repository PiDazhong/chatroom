stages:
  - test
  - build
  - deploy

# 代码检查阶段
lint:
  stage: test
  variables:
    GIT_STRATEGY: none # 禁用默认的代码拉取
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null # 添加私钥
    - mkdir -p ~/.ssh
    - ssh-keyscan -p 2222 gitlab.quantanalysis.cn >> ~/.ssh/known_hosts # 指定端口 2222
    # 将远程仓库 URL 强制修改为 SSH
    - if [ -d ".git" ]; then git remote set-url origin ssh://git@gitlab.quantanalysis.cn:2222/chatroom/chatroom.git && git pull origin master; else git clone ssh://git@gitlab.quantanalysis.cn:2222/chatroom/chatroom.git .; fi
  script:
    - npm install
    - npm run lint # 假设你使用的是 JavaScript 相关项目
  except:
    - tags # 排除在 tags 上运行

# 构建前端项目（只有 lint 通过且是 master 或 v 开头的分支时触发）
build_frontend:
  stage: build
  before_script:
    - git config --global url."https://access_token:${ACCESS_TOKEN}@gitlab.quantanalysis.cn".insteadOf "https://gitlab.quantanalysis.cn"
  script:
    - npm install
    - npm run build # 打包项目，生成静态文件
  artifacts:
    paths:
      - chatroom/ # 假设打包后的文件存放在 chatroom 目录
  only:
    - master
    - /^v\d+\.\d+\.\d+$/
  dependencies:
    - lint # 确保 build 只在 lint 通过时触发

# 部署到服务器或静态托管服务
deploy_prod:
  stage: deploy
  script:
    - scp chatroom.tar.gz root@47.120.40.71:/encrypt/$CI_COMMIT_REF_NAME/ # 发送打包文件到对应分支的目录
    - ssh root@47.120.40.71 "mkdir -p /encrypt/$CI_COMMIT_REF_NAME && tar -xzf /encrypt/$CI_COMMIT_REF_NAME/chatroom.tar.gz -C /encrypt/$CI_COMMIT_REF_NAME/" # 在服务器上解压文件到对应分支的目录
  only:
    - master
    - /^v\d+\.\d+\.\d+$/
  dependencies:
    - build_frontend

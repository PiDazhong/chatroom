stages:
  - test
  - build
  - deploy

# 代码检查阶段
lint:
  stage: test
  variables:
    # 禁用默认的代码拉取
    GIT_STRATEGY: none

  before_script:
    - eval $(ssh-agent -s)

    # 添加私钥
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh

    # 检查是否已经有主机密钥，如果没有则添加
    - grep -q "^gitlab.quantanalysis.cn" ~/.ssh/known_hosts || ssh-keyscan -p 2222 gitlab.quantanalysis.cn >> ~/.ssh/known_hosts

    # 创建一个基于分支名的文件夹，并进入该文件夹
    - mkdir -p $CI_COMMIT_REF_NAME
    - cd $CI_COMMIT_REF_NAME

    # 如果文件夹中没有代码，克隆，否则拉取更新
    - if [ -d ".git" ];
      then git remote set-url origin ssh://git@gitlab.quantanalysis.cn:2222/chatroom/chatroom.git &&
      git pull origin $CI_COMMIT_REF_NAME;
      else git clone --branch $CI_COMMIT_REF_NAME ssh://git@gitlab.quantanalysis.cn:2222/chatroom/chatroom.git .;
      fi

  script:
    - yarn install
    - yarn lint
  except:
    # 排除在 tags 上运行
    - tags

# 构建 Podman 镜像并推送到容器注册表
build_podman_image:
  stage: build
  variables:
    # 禁用默认的代码拉取
    GIT_STRATEGY: none
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  image: registry.gitlab.com/podman/stable:latest # 使用 Podman 官方镜像
  services:
    - docker:21.1.0-dind # GitLab CI/CD 可能仍需要 Docker 容器作为服务
  cache:
    # key: ${CI_COMMIT_REF_SLUG}
    # paths:
    #  - node_modules/ # 缓存依赖，加速 yarn install

  script:
    # 确保目录存在
    - mkdir -p $CI_COMMIT_REF_NAME

    # 进入对应分支的目录
    - cd $CI_COMMIT_REF_NAME

    # 将 node-v21.1.0-linux-x64.tar.xz 文件复制到工作目录
    - cp /tmp/node-v21.1.0-linux-x64.tar.xz ./

    # 登录 GitLab 容器注册表
    - echo "$CI_REGISTRY_PASSWORD" | podman login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

    # 构建镜像，添加元数据信息
    - podman build  --no-cache -t $IMAGE_TAG --label "commit_author=$CI_COMMIT_AUTHOR" --label "commit_ref_name=$CI_COMMIT_REF_NAME" --label "build_time=$(date)" -f ./Dockerfile .

    # 推送镜像到 GitLab 容器注册表
    - podman push $IMAGE_TAG
  only:
    - master
    - /^v\d+\.\d+\.\d+$/
  dependencies:
    - lint

# 部署到服务器
deploy_prod:
  stage: deploy
  variables:
    # 禁用默认的代码拉取
    GIT_STRATEGY: none

  before_script:
    - mkdir -p ~/.ssh

    # 启动 SSH agent 并添加私钥
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

    # 检查 known_hosts 文件中是否已经包含目标服务器的主机密钥，避免重复添加
    - grep -q "^47.120.40.71" ~/.ssh/known_hosts || ssh-keyscan 47.120.40.71 >> ~/.ssh/known_hosts
  script:
    # 在远程服务器上登录到 GitLab 容器注册表
    - ssh root@47.120.40.71 "
      source ~/.bashrc;
      echo '$CI_REGISTRY_PASSWORD' | podman login -u '$CI_REGISTRY_USER' --password-stdin $CI_REGISTRY"

    # 检查镜像是否存在并显示镜像描述信息
    - ssh root@47.120.40.71 "
      source ~/.bashrc;
      if podman inspect $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG > /dev/null 2>&1; then
      echo '镜像存在，显示其详情：';
      podman inspect $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG | jq -c '.[0].Config.Labels';
      else
      echo '镜像不存在';
      fi"
  only:
    - master
    - /^v\d+\.\d+\.\d+$/
  dependencies:
    - build_podman_image
# # 构建前端项目（只有 lint 通过且是 master 或 v 开头的分支时触发）
# build_frontend:
#   stage: build
#   variables:
#     # 禁用默认的代码拉取
#     GIT_STRATEGY: none
#   before_script:
#     # 进入对应的分支目录
#     - cd $CI_COMMIT_REF_NAME
#   script:
#     - yarn install
#     - yarn just-build
#   artifacts:
#     paths:
#       - $CI_COMMIT_REF_NAME/chatroom/
#   only:
#     - master
#     - /^v\d+\.\d+\.\d+$/
#   dependencies:
#     # 确保 build 只在 lint 通过时触发
#     - lint

# # 部署到服务器或静态托管服务
# deploy_prod:
#   stage: deploy
#   variables:
#     # 禁用默认的代码拉取
#     GIT_STRATEGY: none
#   before_script:
#     - mkdir -p ~/.ssh
#     # 启动 SSH agent 并添加私钥
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#     # 检查 known_hosts 文件中是否已经包含目标服务器的主机密钥，避免重复添加
#     - grep -q "^47.120.40.71" ~/.ssh/known_hosts || ssh-keyscan 47.120.40.71 >> ~/.ssh/known_hosts
#   script:
#     # 进入对应分支的目录并打包文件
#     - cd $CI_COMMIT_REF_NAME
#     # 将打包文件名与分支名称关联
#     - tar -czf chatroom_$CI_COMMIT_REF_NAME.tar.gz chatroom/
#     # 在远程服务器上创建分支目录
#     - ssh root@47.120.40.71 "mkdir -p /encrypt/$CI_COMMIT_REF_NAME"
#     # 发送打包文件到服务器对应分支的目录
#     - scp chatroom_$CI_COMMIT_REF_NAME.tar.gz root@47.120.40.71:/encrypt/$CI_COMMIT_REF_NAME/
#     # 在服务器上解压到对应的分支目录
#     - ssh root@47.120.40.71 "tar -xzf /encrypt/$CI_COMMIT_REF_NAME/chatroom_$CI_COMMIT_REF_NAME.tar.gz -C /encrypt/$CI_COMMIT_REF_NAME/"
#   only:
#     - master
#     - /^v\d+\.\d+\.\d+$/
#   dependencies:
#     - build_frontend

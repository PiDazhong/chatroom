stages:
  - deploy

# 部署到服务器
deploy_prod:
  stage: deploy
  variables:
    # 禁用默认的代码拉取
    GIT_STRATEGY: none
  before_script:
    - mkdir -p ~/.ssh
    # 启动 SSH agent 并添加私钥
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    # 检查 known_hosts 文件中是否已经包含目标服务器的主机密钥，避免重复添加
    - grep -q "^47.120.40.71" ~/.ssh/known_hosts || ssh-keyscan 47.120.40.71 >> ~/.ssh/known_hosts
  script:
    # 在远程服务器上登录到 GitLab 容器注册表
    - ssh root@47.120.40.71 "echo '$CI_REGISTRY_PASSWORD' | podman login -u '$CI_REGISTRY_USER' --password-stdin $CI_REGISTRY"
      # 检查镜像是否存在并显示镜像描述信息
    - ssh root@47.120.40.71 "podman inspect $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG && \
      echo '镜像存在，显示其详情：'; \
      podman inspect $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG | jq -c '.[0].Config.Labels'"
  only:
    - master
    - /^v\d+\.\d+\.\d+$/
# # 构建前端项目（只有 lint 通过且是 master 或 v 开头的分支时触发）
# build_frontend:
#   stage: build
#   variables:
#     # 禁用默认的代码拉取
#     GIT_STRATEGY: none
#   before_script:
#     # 进入对应的分支目录
#     - cd $CI_COMMIT_REF_NAME
#   script:
#     - yarn install
#     - yarn just-build
#   artifacts:
#     paths:
#       - $CI_COMMIT_REF_NAME/chatroom/
#   only:
#     - master
#     - /^v\d+\.\d+\.\d+$/
#   dependencies:
#     # 确保 build 只在 lint 通过时触发
#     - lint

# # 部署到服务器或静态托管服务
# deploy_prod:
#   stage: deploy
#   variables:
#     # 禁用默认的代码拉取
#     GIT_STRATEGY: none
#   before_script:
#     - mkdir -p ~/.ssh
#     # 启动 SSH agent 并添加私钥
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#     # 检查 known_hosts 文件中是否已经包含目标服务器的主机密钥，避免重复添加
#     - grep -q "^47.120.40.71" ~/.ssh/known_hosts || ssh-keyscan 47.120.40.71 >> ~/.ssh/known_hosts
#   script:
#     # 进入对应分支的目录并打包文件
#     - cd $CI_COMMIT_REF_NAME
#     # 将打包文件名与分支名称关联
#     - tar -czf chatroom_$CI_COMMIT_REF_NAME.tar.gz chatroom/
#     # 在远程服务器上创建分支目录
#     - ssh root@47.120.40.71 "mkdir -p /encrypt/$CI_COMMIT_REF_NAME"
#     # 发送打包文件到服务器对应分支的目录
#     - scp chatroom_$CI_COMMIT_REF_NAME.tar.gz root@47.120.40.71:/encrypt/$CI_COMMIT_REF_NAME/
#     # 在服务器上解压到对应的分支目录
#     - ssh root@47.120.40.71 "tar -xzf /encrypt/$CI_COMMIT_REF_NAME/chatroom_$CI_COMMIT_REF_NAME.tar.gz -C /encrypt/$CI_COMMIT_REF_NAME/"
#   only:
#     - master
#     - /^v\d+\.\d+\.\d+$/
#   dependencies:
#     - build_frontend
